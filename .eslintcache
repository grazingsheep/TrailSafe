[{"/mnt/c/Users/Alex/Desktop/test/src/index.js":"1","/mnt/c/Users/Alex/Desktop/test/src/reportWebVitals.js":"2","/mnt/c/Users/Alex/Desktop/test/src/App.js":"3","/mnt/c/Users/Alex/Desktop/test/src/BarChart.js":"4"},{"size":5376,"mtime":1608280479869,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1608020087071,"results":"7","hashOfConfig":"6"},{"size":685,"mtime":1608585764831,"results":"8","hashOfConfig":"6"},{"size":1478,"mtime":1608280489893,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1fthsrz",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/mnt/c/Users/Alex/Desktop/test/src/index.js",["21","22","23","24","25","26"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport BarChart from './BarChart'\n\n//weather api key\nconst apiKey = \"6e02ed06076a93442e1e1a6c199308b6\";\n\n//hike data\nconst lat = 47.4966;\nconst lon = -121.733;\nconst avgTime = \"6.5hr\";\nconst distance = \"8.0mi\";\nconst difficulty = \"Hard\";\nconst elevation = \"3150ft\";\nconst terrain = \"Exposed Rock\";\n\nfunction AppHeader(props){\n  return (\n    <div className=\"header\">\n      <h1>{props.name}</h1>\n      <h3>{props.area}</h3>\n    </div>\n  );\n}\n\nfunction WeatherWarning(props){\n  return (\n    <div className=\"weather-warning\">\n      <h4>{props.title}</h4>\n      <p className=\"warning-content\">{props.content}</p>\n    </div>\n  )\n}\n\nclass DisplayWeather extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      temp: \"\",\n      tempForecast: \"\",\n      description: \"\",\n      descriptionForecast: \"\",\n      wind: \"\",\n      sunset: \"\",\n      icon: \"\",\n      dayornight: \"\"\n    }\n  }\n\n  componentDidMount() {\n    const weatherURL = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,daily}&units=imperial&appid=${apiKey}`;\n\n    fetch(weatherURL)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          var utcunixtime = result.current.sunset;\n          var date = new Date(utcunixtime*1000);\n          var hours = date.getHours();\n          var minutes = date.getMinutes();\n          var ampm = hours >= 12 ? 'pm' : 'am';\n          hours = hours % 12;\n          hours = hours ? hours : 12;\n          minutes = minutes < 10 ? '0' + minutes : minutes;\n          \n          var sunsetTime = hours + \":\"+minutes+ampm;\n\n          this.setState({\n            isLoaded: true,\n            temp: Math.round(result.current.temp),\n            tempForecast: Math.round(result.hourly[5].temp),\n            description: result.current.weather[0].description,\n            descriptionForecast: result.hourly[5].weather[0].description,\n            wind: Math.round(result.current.wind_speed*10)/10,\n            sunset: sunsetTime,\n            icon: \" http://openweathermap.org/img/wn/\"+result.current.weather[0].icon+\"@2x.png\",\n            dayornight: result.current.weather[0].icon.substr(2,1)\n          });\n          // console.log(result);\n        }, \n        \n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render(){\n    const { isLoaded, error, temp, tempForecast, description, descriptionForecast, wind, sunset } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      var weatherClassName = \"weather-icon\";\n      if(this.state.dayornight === \"d\") weatherClassName+=\"-d\";\n      return (\n        <div className=\"weather\">\n          <h5 className=\"section-title\">Weather Conditions</h5>\n          <img className={weatherClassName} src={this.state.icon} alt=\"weather-icon\"/>\n          <div>\n            <h2 className=\"temperature\">{this.state.temp}°F → {this.state.tempForecast}°F</h2>\n          </div>\n          <div>\n            <h2 className=\"forecast\">{this.state.description} → {this.state.descriptionForecast}</h2>\n            <p className=\"sunsetwind\">Wind: {this.state.wind}mph | Sunset: {this.state.sunset}</p>\n          </div>\n          <WeatherWarning title=\"Parts of this trail are covered by snow\" content=\"Wear microspikes or high-traction footwear\"/>\n        </div>\n      );\n    }\n    \n  }\n}\n\nfunction TrailInfoListing(props){\n  let className = \"trail-info-listing\"\n  if(props.justifyRight){\n    className += \" right\"\n  }\n  return (\n    <div className={className}>\n      <h2>{props.value}</h2>\n      <p>{props.title}</p>\n    </div>\n  );\n}\n\nfunction TrailInfo(props){\n  return(\n    <div className=\"trail-info\">\n    <h5 className=\"section-title\">Hike Overview</h5>\n    <div className=\"info-row\">\n      <TrailInfoListing  value= {distance} title=\"Roundtrip\"/>\n      <TrailInfoListing  justifyRight={true} value={difficulty} title=\"Difficulty\"/>\n    </div>\n    <div className=\"info-row\">\n      <TrailInfoListing value={elevation} title=\"Elevation Gained\"/>\n      <TrailInfoListing justifyRight={true} value={avgTime} title=\"Average Hike Time\"/>\n    </div>\n    <div className=\"info-row\">\n      <TrailInfoListing value={terrain} title=\"Terrain Type(s)\"/>\n    </div>\n  </div>\n  );\n}\n\nfunction Divider(){\n  return (\n    <div className=\"divider\"></div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppHeader name=\"Mount Si\" area=\"Snoqualmie Region -- North Bend Area\"/>\n    <Divider />\n    <DisplayWeather />\n    <Divider />\n    <TrailInfo />\n    <Divider />\n    <App />\n    <BarChart data={[5,10,1,3]} size={[400,400]} />\n    <Divider />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["27","28"],"/mnt/c/Users/Alex/Desktop/test/src/reportWebVitals.js",[],"/mnt/c/Users/Alex/Desktop/test/src/App.js",[],"/mnt/c/Users/Alex/Desktop/test/src/BarChart.js",[],["29","30"],{"ruleId":"31","severity":1,"message":"32","line":100,"column":30,"nodeType":"33","messageId":"34","endLine":100,"endColumn":34},{"ruleId":"31","severity":1,"message":"35","line":100,"column":36,"nodeType":"33","messageId":"34","endLine":100,"endColumn":48},{"ruleId":"31","severity":1,"message":"36","line":100,"column":50,"nodeType":"33","messageId":"34","endLine":100,"endColumn":61},{"ruleId":"31","severity":1,"message":"37","line":100,"column":63,"nodeType":"33","messageId":"34","endLine":100,"endColumn":82},{"ruleId":"31","severity":1,"message":"38","line":100,"column":84,"nodeType":"33","messageId":"34","endLine":100,"endColumn":88},{"ruleId":"31","severity":1,"message":"39","line":100,"column":90,"nodeType":"33","messageId":"34","endLine":100,"endColumn":96},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"40","replacedBy":"44"},{"ruleId":"42","replacedBy":"45"},"no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","'tempForecast' is assigned a value but never used.","'description' is assigned a value but never used.","'descriptionForecast' is assigned a value but never used.","'wind' is assigned a value but never used.","'sunset' is assigned a value but never used.","no-native-reassign",["46"],"no-negated-in-lhs",["47"],["46"],["47"],"no-global-assign","no-unsafe-negation"]